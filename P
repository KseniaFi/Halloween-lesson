<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Halloween Matching Game</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }
        
        body {
            background: url('Photos/IMG_20251020_193039_262.jpg') no-repeat center center fixed;
            background-size: cover;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            position: relative;
        }
        
        /* Halloween-themed overlay */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: -1;
        }
        
        .game-container {
            display: flex;
            justify-content: space-between;
            width: 95%;
            max-width: 1200px;
            margin-bottom: 30px;
            gap: 30px;
        }
        
        .images-container, .phrases-container {
            width: 48%;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .item {
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            min-height: 120px;
            position: relative;
            overflow: hidden;
            border: 4px solid transparent;
        }
        
        /* Round cells for images - doubled in size */
        .image-item {
            border-radius: 50%;
            width: 360px;
            height: 360px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0 auto;
            padding: 10px;
            overflow: hidden;
            background-color: white;
        }
        
        .image-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
            border-color: #ff8c00;
        }
        
        .phrase-item {
            background-color: #ff7518;
            color: white;
        }
        
        .phrase-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
            border-color: #9b59b6;
        }
        
        .image-item.selected {
            border-color: #ff8c00;
            box-shadow: 0 0 20px rgba(255, 140, 0, 0.7);
        }
        
        .phrase-item.selected {
            border-color: #9b59b6;
            box-shadow: 0 0 20px rgba(155, 89, 182, 0.7);
        }
        
        .image-item.correct {
            border-color: #2ecc71;
            box-shadow: 0 0 25px rgba(46, 204, 113, 0.8);
        }
        
        .phrase-item.correct {
            border-color: #9b59b6;
            box-shadow: 0 0 25px rgba(155, 89, 182, 0.8);
        }
        
        .image-item.incorrect, .phrase-item.incorrect {
            border-color: #e74c3c;
            box-shadow: 0 0 20px rgba(231, 76, 60, 0.7);
            animation: shake 0.5s;
        }
        
        /* Animation for disappearing elements */
        .image-item.disappear, .phrase-item.disappear {
            animation: disappear 1.5s forwards;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }
        
        @keyframes disappear {
            0% { 
                opacity: 1;
                transform: scale(1);
            }
            70% {
                opacity: 1;
                transform: scale(1);
            }
            100% { 
                opacity: 0;
                transform: scale(0);
                display: none;
            }
        }
        
        /* Image adaptation for round cells */
        .image-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }
        
        .phrase-item p {
            font-size: 1.4rem;
            margin: 0;
            text-align: center;
            color: white;
            width: 100%;
            line-height: 1.4;
            font-weight: bold;
        }
        
        .controls {
            margin-top: 20px;
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        button {
            background-color: #ff7518;
            color: white;
            border: none;
            border-radius: 50px;
            padding: 15px 30px;
            font-size: 1.3rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            font-weight: bold;
        }
        
        button:hover {
            background-color: #e65c00;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }
        
        .completion-message {
            font-size: 2.5rem;
            color: #ff8c00;
            text-align: center;
            margin-top: 20px;
            opacity: 0;
            transition: opacity 0.5s;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
        
        /* Стили для PDF версии */
        .pdf-version {
            display: none;
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        
        .pdf-title {
            text-align: center;
            font-size: 24px;
            margin-bottom: 20px;
            color: #ff7518;
        }
        
        .pdf-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .pdf-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            page-break-inside: avoid;
        }
        
        .pdf-image {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 15px;
        }
        
        .pdf-phrase {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }
        
        /* Tablet responsiveness */
        @media (max-width: 1024px) {
            .game-container {
                flex-direction: column;
                gap: 30px;
            }
            
            .images-container, .phrases-container {
                width: 100%;
            }
            
            .image-item {
                width: 320px;
                height: 320px;
            }
        }
        
        /* Mobile responsiveness */
        @media (max-width: 768px) {
            body {
                padding: 15px;
            }
            
            .item {
                min-height: 100px;
                padding: 15px;
            }
            
            .phrase-item p {
                font-size: 1.2rem;
            }
            
            .image-item {
                width: 280px;
                height: 280px;
            }
            
            button {
                padding: 12px 25px;
                font-size: 1.1rem;
            }
            
            .completion-message {
                font-size: 1.8rem;
            }
        }
        
        /* Small screen responsiveness */
        @media (max-width: 480px) {
            .item {
                min-height: 90px;
                padding: 10px;
            }
            
            .phrase-item p {
                font-size: 1.1rem;
            }
            
            .image-item {
                width: 240px;
                height: 240px;
            }
            
            button {
                padding: 10px 20px;
                font-size: 1rem;
            }
            
            .completion-message {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="game-container" id="game-container">
        <div class="images-column">
            <div class="images-container" id="images-container">
                <!-- Images will be added via JavaScript -->
            </div>
        </div>
        
        <div class="phrases-column">
            <div class="phrases-container" id="phrases-container">
                <!-- Phrases will be added via JavaScript -->
            </div>
        </div>
    </div>
    
    <div class="controls">
        <button id="reset-btn">Start Over</button>
        <button id="pdf-btn">Download as PDF</button>
    </div>
    
    <div class="completion-message" id="completion-message">Spooktacular! All matches are correct!</div>

    <!-- Скрытый контейнер для PDF версии -->
    <div class="pdf-version" id="pdf-version">
        <h1 class="pdf-title">Halloween Matching Game</h1>
        <div class="pdf-grid" id="pdf-grid">
            <!-- PDF content will be generated here -->
        </div>
    </div>

    <!-- Include jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>
        // Game data - Halloween images and phrases
        const gameData = [
            { image: 'Photos/IMG_20251020_175109_595.jpg', phrase: 'Monster' },
            { image: 'Photos/IMG_20251020_123050_219.jpg', phrase: 'Spider' },
            { image: 'Photos/IMG_20251020_122957_466.jpg', phrase: 'Mummy' },
            { image: 'Photos/IMG_20251019_161943_247.jpg', phrase: 'Wizard' },
            { image: 'Photos/IMG_20251019_161657_379.jpg', phrase: 'Scarecrow' },
            { image: 'Photos/IMG_20251019_161133_941.jpg', phrase: 'Fireworks' },
            { image: 'Photos/IMG_20251019_161047_687.jpg', phrase: 'Bat' },
            { image: 'Photos/IMG_20251019_160956_540.jpg', phrase: 'Vampire' },
            { image: 'Photos/IMG_20251019_160820_005.jpg', phrase: 'Ghost' },
            { image: 'Photos/IMG_20251019_160644_141.jpg', phrase: 'Witch' },
            { image: 'Photos/IMG_20251019_160545_015.jpg', phrase: 'Jack-o\'-lantern' },
            { image: 'Photos/IMG_20251020_192659_254.jpg', phrase: 'Pumpkin' }
        ];

        // Game state variables
        let selectedImage = null;
        let selectedPhrase = null;
        let matchedPairs = [];

        // Initialize game
        function initGame() {
            const imagesContainer = document.getElementById('images-container');
            const phrasesContainer = document.getElementById('phrases-container');
            
            // Clear containers
            imagesContainer.innerHTML = '';
            phrasesContainer.innerHTML = '';
            
            // Reset state
            selectedImage = null;
            selectedPhrase = null;
            matchedPairs = [];
            
            // Hide completion message
            document.getElementById('completion-message').style.opacity = '0';
            
            // Images in correct order
            gameData.forEach((item, index) => {
                const imageItem = document.createElement('div');
                imageItem.className = 'item image-item';
                imageItem.dataset.index = index;
                
                const img = document.createElement('img');
                // Use actual image paths
                img.src = item.image;
                img.alt = `Image ${index+1}`;
                
                // Add error handling for images
                img.onerror = function() {
                    this.src = `https://via.placeholder.com/600x600/ff7518/white?text=Halloween+${index+1}`;
                    console.warn(`Failed to load image: ${item.image}`);
                };
                
                imageItem.appendChild(img);
                imagesContainer.appendChild(imageItem);
                
                // Click handler for image
                imageItem.addEventListener('click', () => handleImageClick(index));
            });
            
            // Phrases in random order
            const shuffledPhrases = [...gameData].sort(() => Math.random() - 0.5);
            
            shuffledPhrases.forEach((item, index) => {
                const phraseItem = document.createElement('div');
                phraseItem.className = 'item phrase-item';
                phraseItem.dataset.index = index;
                phraseItem.dataset.originalIndex = gameData.indexOf(item);
                
                const p = document.createElement('p');
                p.textContent = item.phrase;
                
                phraseItem.appendChild(p);
                phrasesContainer.appendChild(phraseItem);
                
                // Click handler for phrase
                phraseItem.addEventListener('click', () => handlePhraseClick(index));
            });
        }

        // Image click handler
        function handleImageClick(index) {
            // Ignore clicks if game is completed
            if (matchedPairs.length === gameData.length * 2) return;
            
            const imageItems = document.querySelectorAll('.image-item');
            const clickedItem = imageItems[index];
            
            // Ignore if image is already matched
            if (matchedPairs.includes(index)) return;
            
            // Deselect other images
            imageItems.forEach(item => {
                if (item !== clickedItem && !matchedPairs.includes(parseInt(item.dataset.index))) {
                    item.classList.remove('selected');
                }
            });
            
            // If clicking already selected image, deselect it
            if (selectedImage === index) {
                clickedItem.classList.remove('selected');
                selectedImage = null;
            } else {
                // Select new image
                clickedItem.classList.add('selected');
                selectedImage = index;
                
                // If phrase is already selected, check match
                if (selectedPhrase !== null) {
                    checkMatch();
                }
            }
        }

        // Phrase click handler
        function handlePhraseClick(index) {
            // Ignore clicks if game is completed
            if (matchedPairs.length === gameData.length * 2) return;
            
            const phraseItems = document.querySelectorAll('.phrase-item');
            const clickedItem = phraseItems[index];
            
            // Ignore if phrase is already matched
            if (matchedPairs.includes(index + gameData.length)) return;
            
            // Deselect other phrases
            phraseItems.forEach(item => {
                if (item !== clickedItem && !matchedPairs.includes(parseInt(item.dataset.index) + gameData.length)) {
                    item.classList.remove('selected');
                }
            });
            
            // If clicking already selected phrase, deselect it
            if (selectedPhrase === index) {
                clickedItem.classList.remove('selected');
                selectedPhrase = null;
            } else {
                // Select new phrase
                clickedItem.classList.add('selected');
                selectedPhrase = index;
                
                // If image is already selected, check match
                if (selectedImage !== null) {
                    checkMatch();
                }
            }
        }

        // Check if selected image and phrase match
        function checkMatch() {
            const imageItems = document.querySelectorAll('.image-item');
            const phraseItems = document.querySelectorAll('.phrase-item');
            
            const selectedImageItem = imageItems[selectedImage];
            const selectedPhraseItem = phraseItems[selectedPhrase];
            
            // Check if indexes match
            const phraseOriginalIndex = parseInt(selectedPhraseItem.dataset.originalIndex);
            
            if (selectedImage === phraseOriginalIndex) {
                // Correct match
                selectedImageItem.classList.remove('selected');
                selectedImageItem.classList.add('correct');
                
                selectedPhraseItem.classList.remove('selected');
                selectedPhraseItem.classList.add('correct');
                
                // Add to matched pairs list
                matchedPairs.push(selectedImage, selectedPhrase + gameData.length);
                
                // After 2 seconds, make the matched elements disappear
                setTimeout(() => {
                    selectedImageItem.classList.add('disappear');
                    selectedPhraseItem.classList.add('disappear');
                }, 2000);
                
                // Check if game is completed
                if (matchedPairs.length === gameData.length * 2) {
                    setTimeout(() => {
                        document.getElementById('completion-message').style.opacity = '1';
                    }, 3500);
                }
            } else {
                // Incorrect match
                selectedImageItem.classList.add('incorrect');
                selectedPhraseItem.classList.add('incorrect');
                
                // Reset selection after a second
                setTimeout(() => {
                    selectedImageItem.classList.remove('selected', 'incorrect');
                    selectedPhraseItem.classList.remove('selected', 'incorrect');
                }, 1000);
            }
            
            // Reset selected elements
            selectedImage = null;
            selectedPhrase = null;
        }

        // Function to create PDF version of the game
        function createPDFVersion() {
            const pdfGrid = document.getElementById('pdf-grid');
            pdfGrid.innerHTML = '';
            
            // Create pairs for PDF
            gameData.forEach((item, index) => {
                const pdfItem = document.createElement('div');
                pdfItem.className = 'pdf-item';
                
                const img = document.createElement('img');
                img.src = item.image;
                img.alt = item.phrase;
                img.className = 'pdf-image';
                
                // Add error handling for images
                img.onerror = function() {
                    this.src = `https://via.placeholder.com/120x120/ff7518/white?text=Halloween+${index+1}`;
                };
                
                const phrase = document.createElement('div');
                phrase.className = 'pdf-phrase';
                phrase.textContent = item.phrase;
                
                pdfItem.appendChild(img);
                pdfItem.appendChild(phrase);
                pdfGrid.appendChild(pdfItem);
            });
        }

        // Function to convert the game to PDF and download
        function downloadAsPDF() {
            // Create PDF version
            createPDFVersion();
            
            // Show PDF version
            const pdfVersion = document.getElementById('pdf-version');
            pdfVersion.style.display = 'block';
            
            // Use html2canvas to capture the PDF version
            html2canvas(pdfVersion, {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                scrollX: 0,
                scrollY: 0,
                width: pdfVersion.scrollWidth,
                height: pdfVersion.scrollHeight
            }).then(canvas => {
                // Hide PDF version again
                pdfVersion.style.display = 'none';
                
                // Create a new jsPDF instance
                const pdf = new jspdf.jsPDF('p', 'mm', 'a4');
                
                // Calculate dimensions to fit the PDF
                const imgWidth = 210; // A4 width in mm
                const pageHeight = 297; // A4 height in mm
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                
                let heightLeft = imgHeight;
                let position = 0;
                
                // Add first page
                pdf.addImage(canvas, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
                
                // Add additional pages if content is longer than one page
                while (heightLeft >= 0) {
                    position = heightLeft - imgHeight;
                    pdf.addPage();
                    pdf.addImage(canvas, 'PNG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                }
                
                // Save the PDF
                pdf.save('halloween-matching-game.pdf');
            }).catch(error => {
                console.error('Error generating PDF:', error);
                // Hide PDF version in case of error
                pdfVersion.style.display = 'none';
                alert('Error generating PDF. Please try again.');
            });
        }

        // Initialize game when page loads
        document.addEventListener('DOMContentLoaded', () => {
            initGame();
            
            // Handler for reset button
            document.getElementById('reset-btn').addEventListener('click', initGame);
            
            // Handler for PDF button
            document.getElementById('pdf-btn').addEventListener('click', downloadAsPDF);
        });
    </script>
</body>
</html>
